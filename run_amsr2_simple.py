#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π launcher –¥–ª—è AMSR2 Super-Resolution
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏
"""

import os
import sys
import subprocess
import argparse
from pathlib import Path


def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"""

    required_packages = [
        'torch', 'torchvision', 'numpy', 'matplotlib',
        'scikit-learn', 'tqdm'
    ]

    missing = []

    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")

    for package in required_packages:
        try:
            __import__(package)
            print(f"‚úÖ {package}")
        except ImportError:
            missing.append(package)
            print(f"‚ùå {package}")

    if missing:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {missing}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π:")
        print(f"pip install {' '.join(missing)}")
        return False

    print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True


def check_system():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""

    print("\nüñ•Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")

    try:
        import torch
        if torch.cuda.is_available():
            gpu_name = torch.cuda.get_device_name(0)
            gpu_memory = torch.cuda.get_device_properties(0).total_memory / 1024 ** 3
            print(f"‚úÖ GPU: {gpu_name} ({gpu_memory:.1f} GB)")

            if gpu_memory < 6:
                print("‚ö†Ô∏è –ú–∞–ª–æ GPU –ø–∞–º—è—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --batch-size 4")
        else:
            print("‚ö†Ô∏è CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω CPU")
            print("‚ö†Ô∏è –û–±—É—á–µ–Ω–∏–µ –Ω–∞ CPU –±—É–¥–µ—Ç –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω—ã–º")
    except ImportError:
        print("‚ùå PyTorch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

    return True


def analyze_npz_directory(npz_dir):
    """–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ NPZ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""

    if not os.path.exists(npz_dir):
        return False, f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {npz_dir}"

    import glob
    npz_files = glob.glob(os.path.join(npz_dir, "*.npz"))

    if not npz_files:
        return False, f"NPZ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {npz_dir}"

    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(npz_files)} NPZ —Ñ–∞–π–ª–æ–≤ –≤ {npz_dir}")

    # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª
    try:
        import numpy as np
        with np.load(npz_files[0], allow_pickle=True) as data:
            if 'swath_array' in data:
                swath_array = data['swath_array']
                print(f"‚úÖ –§–æ—Ä–º–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {len(swath_array)} swaths –≤ –ø–µ—Ä–≤–æ–º —Ñ–∞–π–ª–µ")
                return True, f"–ì–æ—Ç–æ–≤–æ –∫ –æ–±—É—á–µ–Ω–∏—é: {len(npz_files)} —Ñ–∞–π–ª–æ–≤"
            else:
                return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç NPZ —Ñ–∞–π–ª–∞"
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è NPZ: {e}"


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è launcher"""

    parser = argparse.ArgumentParser(
        description="–ü—Ä–æ—Å—Ç–æ–π launcher –¥–ª—è AMSR2 Super-Resolution",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

1. –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏:
   python run_amsr2_simple.py --test

2. –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –≤–∞—à–∏—Ö NPZ –¥–∞–Ω–Ω—ã—Ö:
   python run_amsr2_simple.py --train --npz-dir /path/to/your/npz/files

3. –û–±—É—á–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:
   python run_amsr2_simple.py --train --npz-dir /path/to/data \\
       --batch-size 4 --epochs 30 --lr 2e-4

4. Inference –Ω–∞ –Ω–æ–≤–æ–º —Ñ–∞–π–ª–µ:
   python run_amsr2_simple.py --inference \\
       --model best_amsr2_model.pth \\
       --input data.npz \\
       --output enhanced.npz
        """
    )

    # –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã
    parser.add_argument('--test', action='store_true',
                        help='–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏')
    parser.add_argument('--train', action='store_true',
                        help='–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏')
    parser.add_argument('--inference', action='store_true',
                        help='Inference –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö')

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    parser.add_argument('--npz-dir', type=str, default='./npz_data',
                        help='–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å NPZ —Ñ–∞–π–ª–∞–º–∏')

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è
    parser.add_argument('--batch-size', type=int, default=8,
                        help='–†–∞–∑–º–µ—Ä batch (—É–º–µ–Ω—å—à–∏—Ç–µ –µ—Å–ª–∏ –º–∞–ª–æ GPU –ø–∞–º—è—Ç–∏)')
    parser.add_argument('--epochs', type=int, default=50,
                        help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö')
    parser.add_argument('--lr', type=float, default=1e-4,
                        help='Learning rate')
    parser.add_argument('--orbit-filter', choices=['A', 'D', 'U'],
                        help='–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –æ—Ä–±–∏—Ç—ã')

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã inference
    parser.add_argument('--model', type=str, default='best_amsr2_model.pth',
                        help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –º–æ–¥–µ–ª–∏')
    parser.add_argument('--input', type=str,
                        help='–í—Ö–æ–¥–Ω–æ–π NPZ —Ñ–∞–π–ª')
    parser.add_argument('--output', type=str,
                        help='–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')

    args = parser.parse_args()

    print("üõ∞Ô∏è AMSR2 BRIGHTNESS TEMPERATURE SUPER-RESOLUTION")
    print("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    if not check_dependencies():
        sys.exit(1)

    if not check_system():
        sys.exit(1)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
    if args.test:
        print("\nüöÄ –†–ï–ñ–ò–ú: –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        cmd = [
            sys.executable, "amsr2_super_resolution_complete.py",
            "--test-mode",
            "--epochs", "5",
            "--batch-size", str(min(args.batch_size, 4))
        ]

    elif args.train:
        print(f"\nüéØ –†–ï–ñ–ò–ú: –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {args.npz_dir}")

        # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
        success, message = analyze_npz_directory(args.npz_dir)
        print(message)

        if not success:
            print("\n‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–∞–Ω–Ω—ã–º–∏. –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º...")
            args.test = True
            cmd = [
                sys.executable, "amsr2_super_resolution_complete.py",
                "--test-mode",
                "--epochs", "5"
            ]
        else:
            cmd = [
                sys.executable, "amsr2_super_resolution_complete.py",
                "--npz-dir", args.npz_dir,
                "--batch-size", str(args.batch_size),
                "--epochs", str(args.epochs),
                "--lr", str(args.lr)
            ]

            if args.orbit_filter:
                cmd.extend(["--orbit-filter", args.orbit_filter])

    elif args.inference:
        print("\nüîÆ –†–ï–ñ–ò–ú: Inference")

        if not args.input or not args.output:
            print("‚ùå –î–ª—è inference —Ç—Ä–µ–±—É—é—Ç—Å—è --input –∏ --output")
            sys.exit(1)

        if not os.path.exists(args.model):
            print(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {args.model}")
            sys.exit(1)

        if not os.path.exists(args.input):
            print(f"‚ùå –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.input}")
            sys.exit(1)

        # –î–ª—è inference –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏
        try:
            from amsr2_super_resolution_complete import process_new_npz_file

            enhanced_swaths = process_new_npz_file(
                model_path=args.model,
                npz_path=args.input,
                output_path=args.output
            )

            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(enhanced_swaths)} swaths")
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç: {args.output}")
            return

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ inference: {e}")
            sys.exit(1)

    else:
        print("\n‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º: --test, --train –∏–ª–∏ --inference")
        parser.print_help()
        sys.exit(1)

    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã:")
    print(" ".join(cmd))
    print("\n" + "=" * 60)

    try:
        result = subprocess.run(cmd, check=True)
        print("\n" + "=" * 60)
        print("üéâ –í–´–ü–û–õ–ù–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")

        if args.test or args.train:
            print("\nüìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
            print("  - best_amsr2_model.pth (–≤–µ—Å–∞ –º–æ–¥–µ–ª–∏)")
            print("  - amsr2_training_history.png (–≥—Ä–∞—Ñ–∏–∫–∏)")
            print("  - amsr2_training_summary.json (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)")

    except subprocess.CalledProcessError as e:
        print("\n" + "=" * 60)
        print("‚ùå –û–®–ò–ë–ö–ê –í–´–ü–û–õ–ù–ï–ù–ò–Ø")
        print(f"–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {e.returncode}")
        sys.exit(1)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)


if __name__ == "__main__":
    main()