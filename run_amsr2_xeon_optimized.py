#!/usr/bin/env python3
"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π launcher –¥–ª—è Xeon E5-2640 v4 (30 —è–¥–µ—Ä –º–∞–∫—Å–∏–º—É–º)
–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–µ—Å—É—Ä—Å–æ–≤
"""

import os
import sys
import subprocess
import argparse
import psutil
import time
import shutil


def check_system_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""

    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ CPU
    cpu_count = psutil.cpu_count()
    cpu_freq = psutil.cpu_freq()

    print(f"   CPU: {cpu_count} —è–¥–µ—Ä")
    if cpu_freq:
        print(f"   –ß–∞—Å—Ç–æ—Ç–∞: {cpu_freq.current:.0f} MHz (–º–∞–∫—Å: {cpu_freq.max:.0f} MHz)")

    if cpu_count < 20:
        print("‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 20 —è–¥–µ—Ä –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
    memory = psutil.virtual_memory()
    memory_gb = memory.total / 1024 ** 3
    print(f"   RAM: {memory_gb:.1f} GB (–¥–æ—Å—Ç—É–ø–Ω–æ: {memory.available / 1024 ** 3:.1f} GB)")

    if memory_gb < 16:
        print("‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 16 GB RAM")
        return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
    disk = psutil.disk_usage('.')
    free_gb = disk.free / 1024 ** 3
    print(f"   –î–∏—Å–∫: {free_gb:.1f} GB —Å–≤–æ–±–æ–¥–Ω–æ")

    if free_gb < 10:
        print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 10 GB)")
        return False

    print("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
    return True


def setup_xeon_environment(max_cores=30):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è Xeon E5-2640 v4"""

    print(f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è {max_cores} —è–¥–µ—Ä...")

    # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CPU
    os.environ['OMP_NUM_THREADS'] = str(max_cores)
    os.environ['MKL_NUM_THREADS'] = str(max_cores)
    os.environ['NUMEXPR_NUM_THREADS'] = str(max_cores)

    # Intel MKL –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è Xeon
    os.environ['MKL_DYNAMIC'] = 'FALSE'
    os.environ['MKL_DOMAIN_NUM_THREADS'] = f"MKL_BLAS={max_cores // 2},MKL_FFT={max_cores // 4}"

    # CPU affinity –¥–ª—è NUMA
    # E5-2640 v4 –∏–º–µ–µ—Ç 2 NUMA —É–∑–ª–∞
    os.environ['KMP_AFFINITY'] = 'granularity=fine,compact,1,0'
    os.environ['KMP_BLOCKTIME'] = '1'

    # –û—Ç–∫–ª—é—á–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –º–µ—à–∞—Ç—å
    os.environ['KMP_DUPLICATE_LIB_OK'] = 'TRUE'

    print(f"   OMP_NUM_THREADS: {max_cores}")
    print(f"   MKL_NUM_THREADS: {max_cores}")
    print(f"   KMP_AFFINITY: –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è NUMA")


def get_optimal_params_for_dataset_size(estimated_swaths):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""

    if estimated_swaths < 1000:
        # –ú–∞–ª–µ–Ω—å–∫–∏–π –¥–∞—Ç–∞—Å–µ—Ç
        return {
            'batch_size': 8,
            'num_workers': 12,
            'epochs': 30,
            'description': '–ú–∞–ª–µ–Ω—å–∫–∏–π –¥–∞—Ç–∞—Å–µ—Ç (–±—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ)'
        }
    elif estimated_swaths < 5000:
        # –°—Ä–µ–¥–Ω–∏–π –¥–∞—Ç–∞—Å–µ—Ç
        return {
            'batch_size': 6,
            'num_workers': 15,
            'epochs': 40,
            'description': '–°—Ä–µ–¥–Ω–∏–π –¥–∞—Ç–∞—Å–µ—Ç (–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å)'
        }
    elif estimated_swaths < 15000:
        # –ë–æ–ª—å—à–æ–π –¥–∞—Ç–∞—Å–µ—Ç
        return {
            'batch_size': 6,
            'num_workers': 15,
            'epochs': 50,
            'description': '–ë–æ–ª—å—à–æ–π –¥–∞—Ç–∞—Å–µ—Ç (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)'
        }
    else:
        # –û—á–µ–Ω—å –±–æ–ª—å—à–æ–π –¥–∞—Ç–∞—Å–µ—Ç
        return {
            'batch_size': 4,
            'num_workers': 12,
            'epochs': 50,
            'description': '–û—á–µ–Ω—å –±–æ–ª—å—à–æ–π –¥–∞—Ç–∞—Å–µ—Ç (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)'
        }


def estimate_training_time(swaths, epochs, batch_size, cpu_cores=30):
    """–ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—É—á–µ–Ω–∏—è"""

    # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: –≤—Ä–µ–º—è –Ω–∞ –æ–¥–∏–Ω swath –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    base_time_per_swath = 0.8  # —Å–µ–∫—É–Ω–¥ –Ω–∞ swath –Ω–∞ –æ–¥–Ω–æ —è–¥—Ä–æ

    # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä (–Ω–µ –ª–∏–Ω–µ–π–Ω–∞—è –∏–∑-–∑–∞ overhead)
    cpu_efficiency = min(1.0, cpu_cores / 40) * 0.85  # 85% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

    # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–∞ batch size
    batch_efficiency = min(1.0, batch_size / 8) * 0.9

    # –û–±—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    total_seconds = (swaths * epochs * base_time_per_swath) / (cpu_efficiency * batch_efficiency)

    hours = total_seconds / 3600
    days = hours / 24

    return hours, days


def create_monitoring_script():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±—É—á–µ–Ω–∏—è"""

    script_content = '''#!/bin/bash

echo "üñ•Ô∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ AMSR2 –æ–±—É—á–µ–Ω–∏—è –Ω–∞ Xeon E5-2640 v4"
echo "==============================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\\033[0;32m'
YELLOW='\\033[1;33m'
RED='\\033[0;31m'
NC='\\033[0m' # No Color

while true; do
    clear
    echo "üñ•Ô∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ AMSR2 –æ–±—É—á–µ–Ω–∏—è –Ω–∞ Xeon E5-2640 v4"
    echo "==============================================="
    echo "–í—Ä–µ–º—è: $(date '+%Y-%m-%d %H:%M:%S')"
    echo ""

    # CPU –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    echo "üìä CPU Status:"
    cpu_usage=$(mpstat 1 1 | tail -1 | awk '{print 100-$12}')
    if (( $(echo "$cpu_usage > 80" | bc -l) )); then
        color=$GREEN
    elif (( $(echo "$cpu_usage > 50" | bc -l) )); then
        color=$YELLOW
    else
        color=$RED
    fi
    printf "   –û–±—â–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: ${color}%.1f%%${NC}\\n" $cpu_usage

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è 30 —è–¥–µ—Ä
    busy_cores=$(mpstat -P ALL 1 1 | grep "Average" | awk '$12 < 50' | wc -l)
    printf "   –ê–∫—Ç–∏–≤–Ω—ã—Ö —è–¥–µ—Ä: %d –∏–∑ 40 (—Ü–µ–ª—å: ~30)\\n" $busy_cores

    # Memory
    echo ""
    echo "üíæ Memory Status:"
    memory_info=$(free | grep "Mem:")
    total_mem=$(echo $memory_info | awk '{print $2}')
    used_mem=$(echo $memory_info | awk '{print $3}')
    mem_percent=$(echo "scale=1; $used_mem * 100 / $total_mem" | bc)

    if (( $(echo "$mem_percent > 90" | bc -l) )); then
        color=$RED
    elif (( $(echo "$mem_percent > 70" | bc -l) )); then
        color=$YELLOW  
    else
        color=$GREEN
    fi
    printf "   RAM –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ${color}%.1f%%${NC}\\n" $mem_percent

    # PyTorch –ø—Ä–æ—Ü–µ—Å—Å—ã
    echo ""
    echo "üêç Python/PyTorch –ø—Ä–æ—Ü–µ—Å—Å—ã:"
    python_procs=$(ps aux | grep python | grep -v grep | grep -v monitor | wc -l)
    echo "   –ê–∫—Ç–∏–≤–Ω—ã—Ö Python –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: $python_procs"

    # –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ CPU
    echo "   –¢–æ–ø CPU –ø—Ä–æ—Ü–µ—Å—Å—ã:"
    ps aux --sort=-%cpu | head -4 | tail -3 | while read line; do
        echo "     $line"
    done

    # Training progress
    echo ""
    echo "üéØ Training Progress:"
    if [ -f "training.log" ]; then
        tail -3 training.log | grep -E "(–≠–ø–æ—Ö–∞|PSNR|Loss)" | tail -2
    elif [ -f "nohup.out" ]; then
        tail -3 nohup.out | grep -E "(–≠–ø–æ—Ö–∞|PSNR|Loss)" | tail -2
    else
        echo "   –õ–æ–≥–∏ –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi

    # –§–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    echo ""
    echo "üìÅ –§–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:"
    if [ -f "best_amsr2_model.pth" ]; then
        model_size=$(ls -lh best_amsr2_model.pth | awk '{print $5}')
        echo "   ‚úÖ –ú–æ–¥–µ–ª—å: best_amsr2_model.pth ($model_size)"
    else
        echo "   ‚è≥ –ú–æ–¥–µ–ª—å –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"
    fi

    if [ -f "amsr2_training_history.png" ]; then
        echo "   ‚úÖ –ì—Ä–∞—Ñ–∏–∫: amsr2_training_history.png"
    fi

    # –°–∏—Å—Ç–µ–º–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
    echo ""
    echo "‚ö° –°–∏—Å—Ç–µ–º–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞:"
    uptime | awk '{print "   Load average: " $(NF-2) " " $(NF-1) " " $NF}'

    echo ""
    echo "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥. –î–ª—è –≤—ã—Ö–æ–¥–∞: Ctrl+C"
    echo "==============================================="

    sleep 30
done
'''

    with open('monitor_training.sh', 'w') as f:
        f.write(script_content)

    os.chmod('monitor_training.sh', 0o755)
    print("üìä –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: monitor_training.sh")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è launcher"""

    parser = argparse.ArgumentParser(
        description='Launcher –¥–ª—è AMSR2 Super-Resolution –Ω–∞ Xeon E5-2640 v4',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog='''
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

1. –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç (30-45 –º–∏–Ω—É—Ç):
   python run_amsr2_xeon_optimized.py --quick-test --npz-dir /path/to/data

2. –°—Ä–µ–¥–Ω–∏–π —Ç–µ—Å—Ç –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (4-8 —á–∞—Å–æ–≤):
   python run_amsr2_xeon_optimized.py --medium-test --npz-dir /path/to/data

3. –ü–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (48-84 —á–∞—Å–∞):
   python run_amsr2_xeon_optimized.py --full-train --npz-dir /path/to/data

4. –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
   python run_amsr2_xeon_optimized.py --full-train --npz-dir /path/to/data \\
       --batch-size 4 --epochs 40 --max-cores 25
        '''
    )

    # –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--quick-test', action='store_true',
                       help='–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (30-45 –º–∏–Ω)')
    group.add_argument('--medium-test', action='store_true',
                       help='–°—Ä–µ–¥–Ω–∏–π —Ç–µ—Å—Ç –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (4-8 —á–∞—Å–æ–≤)')
    group.add_argument('--full-train', action='store_true',
                       help='–ü–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (2-4 –¥–Ω—è)')

    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument('--npz-dir', type=str,
                        help='–ü—É—Ç—å –∫ NPZ —Ñ–∞–π–ª–∞–º (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è medium-test –∏ full-train)')

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    parser.add_argument('--max-cores', type=int, default=30,
                        help='–ú–∞–∫—Å–∏–º—É–º CPU —è–¥–µ—Ä (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)')
    parser.add_argument('--batch-size', type=int,
                        help='–†–∞–∑–º–µ—Ä batch (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç—Å—è)')
    parser.add_argument('--epochs', type=int,
                        help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç—Å—è)')
    parser.add_argument('--workers', type=int,
                        help='DataLoader workers (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç—Å—è)')

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument('--orbit-filter', choices=['A', 'D', 'U'],
                        help='–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –æ—Ä–±–∏—Ç—ã')
    parser.add_argument('--lr', type=float, default=1e-4,
                        help='Learning rate')
    parser.add_argument('--scale-factor', type=int, default=10,
                        help='–ú–∞—Å—à—Ç–∞–± —É–≤–µ–ª–∏—á–µ–Ω–∏—è')

    # –§–ª–∞–≥–∏
    parser.add_argument('--no-monitoring', action='store_true',
                        help='–ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞')
    parser.add_argument('--background', action='store_true',
                        help='–ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Å nohup')

    args = parser.parse_args()

    print("üõ∞Ô∏è AMSR2 SUPER-RESOLUTION - XEON E5-2640 V4 OPTIMIZED")
    print("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    if not check_system_requirements():
        print("‚ùå –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        sys.exit(1)

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if (args.medium_test or args.full_train) and not args.npz_dir:
        print("‚ùå –î–ª—è medium-test –∏ full-train —Ç—Ä–µ–±—É–µ—Ç—Å—è --npz-dir")
        sys.exit(1)

    if args.npz_dir and not os.path.exists(args.npz_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {args.npz_dir}")
        sys.exit(1)

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ CPU
    max_cores = min(args.max_cores, 30)
    if max_cores != args.max_cores:
        print(f"‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º CPU –¥–æ {max_cores} —è–¥–µ—Ä –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    setup_xeon_environment(max_cores)

    # –û—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if args.npz_dir:
        npz_files = len([f for f in os.listdir(args.npz_dir) if f.endswith('.npz')])
        estimated_swaths = npz_files * 10  # –ü—Ä–∏–º–µ—Ä–Ω–æ 10 swaths –Ω–∞ —Ñ–∞–π–ª
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {npz_files} NPZ —Ñ–∞–π–ª–æ–≤ (~{estimated_swaths} swaths)")
    else:
        estimated_swaths = 100  # –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    optimal = get_optimal_params_for_dataset_size(estimated_swaths)
    print(f"‚öôÔ∏è  –†–µ–∂–∏–º: {optimal['description']}")

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    final_batch_size = args.batch_size or optimal['batch_size']
    final_workers = args.workers or optimal['num_workers']

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    cmd = [sys.executable, "amsr2_super_resolution_complete.py"]

    if args.quick_test:
        print(f"\nüöÄ –†–ï–ñ–ò–ú: –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç ({max_cores} —è–¥–µ—Ä)")
        cmd.extend([
            "--test-mode",
            "--epochs", "10",
            "--batch-size", str(final_batch_size),
            "--cpu-workers", str(final_workers),
            "--cpu-threads", str(max_cores),
            "--max-cpu-cores", str(max_cores)
        ])

        # –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
        hours, days = estimate_training_time(100, 10, final_batch_size, max_cores)
        print(f"‚è±Ô∏è  –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {hours:.1f} —á–∞—Å–æ–≤")

    elif args.medium_test:
        final_epochs = args.epochs or 25
        print(f"\nüß™ –†–ï–ñ–ò–ú: –°—Ä–µ–¥–Ω–∏–π —Ç–µ—Å—Ç ({max_cores} —è–¥–µ—Ä)")
        cmd.extend([
            "--npz-dir", args.npz_dir,
            "--epochs", str(final_epochs),
            "--batch-size", str(final_batch_size),
            "--cpu-workers", str(final_workers),
            "--cpu-threads", str(max_cores),
            "--max-cpu-cores", str(max_cores)
        ])

        # –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
        hours, days = estimate_training_time(estimated_swaths, final_epochs, final_batch_size, max_cores)
        print(f"‚è±Ô∏è  –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {hours:.1f} —á–∞—Å–æ–≤ ({days:.1f} –¥–Ω–µ–π)")

    elif args.full_train:
        final_epochs = args.epochs or optimal['epochs']
        print(f"\nüéØ –†–ï–ñ–ò–ú: –ü–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ ({max_cores} —è–¥–µ—Ä)")
        cmd.extend([
            "--npz-dir", args.npz_dir,
            "--epochs", str(final_epochs),
            "--batch-size", str(final_batch_size),
            "--cpu-workers", str(final_workers),
            "--cpu-threads", str(max_cores),
            "--max-cpu-cores", str(max_cores)
        ])

        # –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
        hours, days = estimate_training_time(estimated_swaths, final_epochs, final_batch_size, max_cores)
        print(f"‚è±Ô∏è  –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {hours:.1f} —á–∞—Å–æ–≤ ({days:.1f} –¥–Ω–µ–π)")

        if days > 5:
            print("‚ö†Ô∏è –û–±—É—á–µ–Ω–∏–µ –∑–∞–π–º–µ—Ç –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ:")
            print("   - –£–º–µ–Ω—å—à–µ–Ω–∏–µ --epochs")
            print("   - –£–≤–µ–ª–∏—á–µ–Ω–∏–µ --batch-size")
            print("   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ --medium-test –¥–ª—è –Ω–∞—á–∞–ª–∞")

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if args.orbit_filter:
        cmd.extend(["--orbit-filter", args.orbit_filter])

    if args.lr != 1e-4:
        cmd.extend(["--lr", str(args.lr)])

    if args.scale_factor != 10:
        cmd.extend(["--scale-factor", str(args.scale_factor)])

    # –í—ã–≤–æ–¥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print(f"\n‚öôÔ∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"   CPU —è–¥—Ä–∞: {max_cores} –∏–∑ {psutil.cpu_count()}")
    print(f"   DataLoader workers: {final_workers}")
    print(f"   Batch size: {final_batch_size}")
    print(f"   –≠–ø–æ—Ö–∏: {cmd[cmd.index('--epochs') + 1] if '--epochs' in cmd else 'auto'}")

    # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    if not args.no_monitoring:
        create_monitoring_script()
        print(f"\nüìä –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:")
        print("   ./monitor_training.sh")

    # –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    print(f"\nüöÄ –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞:")
    print(" ".join(cmd))

    # –ó–∞–ø—É—Å–∫
    print("\n" + "=" * 60)

    try:
        if args.background:
            print("üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...")
            with open('training.log', 'w') as log_file:
                process = subprocess.Popen(
                    cmd,
                    stdout=log_file,
                    stderr=subprocess.STDOUT,
                    preexec_fn=os.setsid if hasattr(os, 'setsid') else None
                )
            print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
            print("üìù –õ–æ–≥–∏: tail -f training.log")
            print("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ./monitor_training.sh")
        else:
            result = subprocess.run(cmd, check=True)
            print("\n" + "=" * 60)
            print("üéâ –í–´–ü–û–õ–ù–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")

    except subprocess.CalledProcessError as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í–´–ü–û–õ–ù–ï–ù–ò–Ø (–∫–æ–¥: {e.returncode})")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
        sys.exit(1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)


if __name__ == "__main__":
    main()