#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π launcher –¥–ª—è AMSR2 Sequential Trainer
–ë–µ–∑ CPU –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π, —Å –∑–∞—â–∏—Ç–æ–π –ø–∞–º—è—Ç–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤
"""

import os
import sys
import subprocess
import argparse
import psutil
import glob
from pathlib import Path


def check_memory():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø–∞–º—è—Ç–∏ —Å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏"""
    memory = psutil.virtual_memory()
    print(f"üíæ –ü–∞–º—è—Ç—å:")
    print(f"   –û–±—â–∞—è: {memory.total / 1024 ** 3:.1f} GB")
    print(f"   –î–æ—Å—Ç—É–ø–Ω–∞—è: {memory.available / 1024 ** 3:.1f} GB")
    print(f"   –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {memory.percent:.1f}%")

    # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if memory.percent > 70:  # –ü–æ–Ω–∏–∂–µ–Ω–æ —Å 80% –¥–æ 70%
        print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –ü–∞–º—è—Ç—å —Å–∏–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        return False

    if memory.percent > 60:  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ 60%
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏!")
        print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–∞–º—è—Ç—å –ø–µ—Ä–µ–¥ –æ–±—É—á–µ–Ω–∏–µ–º")

    if memory.available < 4 * 1024 ** 3:  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 2GB –¥–æ 4GB
        print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø–∞–º—è—Ç–∏!")
        print(f"   –î–æ—Å—Ç—É–ø–Ω–æ: {memory.available / 1024 ** 3:.1f} GB, —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 4 GB")
        return False

    return True


def analyze_npz_directory(npz_dir):
    """–ê–Ω–∞–ª–∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å NPZ —Ñ–∞–π–ª–∞–º–∏"""
    if not os.path.exists(npz_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {npz_dir}")
        return None

    npz_files = glob.glob(os.path.join(npz_dir, "*.npz"))

    if not npz_files:
        print(f"‚ùå NPZ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤: {npz_dir}")
        return None

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
    npz_files.sort()
    total_size_gb = sum(os.path.getsize(f) / 1024 ** 3 for f in npz_files)

    analysis = {
        'total_files': len(npz_files),
        'total_size_gb': total_size_gb,
        'avg_size_mb': (total_size_gb * 1024) / len(npz_files),
        'files': npz_files
    }

    print(f"üìÅ –ê–Ω–∞–ª–∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
    print(f"   –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {analysis['total_files']}")
    print(f"   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {analysis['total_size_gb']:.2f} GB")
    print(f"   –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {analysis['avg_size_mb']:.1f} MB")

    return analysis


def recommend_parameters(analysis, available_memory_gb):
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º –ø–æ–Ω–∏–∂–µ–Ω–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤ –ø–∞–º—è—Ç–∏"""

    if analysis is None:
        return None

    total_files = analysis['total_files']
    total_size_gb = analysis['total_size_gb']

    # –ë–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if available_memory_gb < 6:  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 4GB
        # –ú–∞–ª–æ –ø–∞–º—è—Ç–∏
        rec = {
            'max_files': min(3, total_files),  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 5
            'batch_size': 1,
            'epochs_per_file': 1,
            'memory_threshold': 65.0,  # –ü–æ–Ω–∏–∂–µ–Ω–æ —Å 70%
            'description': '–ú–∞–ª–æ –ø–∞–º—è—Ç–∏ - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'
        }
    elif available_memory_gb < 10:  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 8GB
        # –°—Ä–µ–¥–Ω—è—è –ø–∞–º—è—Ç—å
        rec = {
            'max_files': min(8, total_files),  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 10
            'batch_size': 1,  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 2
            'epochs_per_file': 2,
            'memory_threshold': 70.0,  # –ü–æ–Ω–∏–∂–µ–Ω–æ —Å 75%
            'description': '–°—Ä–µ–¥–Ω—è—è –ø–∞–º—è—Ç—å - –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'
        }
    elif available_memory_gb < 20:  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 16GB
        # –•–æ—Ä–æ—à–∞—è –ø–∞–º—è—Ç—å
        if total_size_gb < 10:
            rec = {
                'max_files': min(15, total_files),  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 20
                'batch_size': 2,  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 3
                'epochs_per_file': 2,
                'memory_threshold': 70.0,
                'description': '–•–æ—Ä–æ—à–∞—è –ø–∞–º—è—Ç—å - —É–º–µ—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'
            }
        else:
            rec = {
                'max_files': min(10, total_files),  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 15
                'batch_size': 1,  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 2
                'epochs_per_file': 2,
                'memory_threshold': 70.0,
                'description': '–•–æ—Ä–æ—à–∞—è –ø–∞–º—è—Ç—å + –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã'
            }
    else:
        # –ú–Ω–æ–≥–æ –ø–∞–º—è—Ç–∏
        if total_size_gb < 20:
            rec = {
                'max_files': min(30, total_files),  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 50
                'batch_size': 3,  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 4
                'epochs_per_file': 3,
                'memory_threshold': 70.0,  # –ü–æ–Ω–∏–∂–µ–Ω–æ —Å 85%
                'description': '–ú–Ω–æ–≥–æ –ø–∞–º—è—Ç–∏ - –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'
            }
        else:
            rec = {
                'max_files': min(20, total_files),  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 30
                'batch_size': 2,  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 3
                'epochs_per_file': 2,
                'memory_threshold': 70.0,
                'description': '–ú–Ω–æ–≥–æ –ø–∞–º—è—Ç–∏ + –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã'
            }

    return rec


def estimate_time(max_files, epochs_per_file, batch_size):
    """–ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    # –û—á–µ–Ω—å –≥—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞
    avg_swaths_per_file = 10
    seconds_per_batch = 3.0

    batches_per_file = avg_swaths_per_file // batch_size
    total_batches = max_files * batches_per_file * epochs_per_file
    total_seconds = total_batches * seconds_per_batch

    hours = total_seconds / 3600
    days = hours / 24

    return {
        'hours': hours,
        'days': days,
        'total_batches': total_batches
    }


def main():
    parser = argparse.ArgumentParser(
        description='–ü—Ä–æ—Å—Ç–æ–π launcher –¥–ª—è AMSR2 Sequential Trainer',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog='''
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

1. –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –Ω–∞ 5 —Ñ–∞–π–ª–∞—Ö:
   python simple_launcher.py --npz-dir /path/to/data --quick-test

2. –°—Ä–µ–¥–Ω–∏–π —Ç–µ—Å—Ç –Ω–∞ 20 —Ñ–∞–π–ª–∞—Ö:
   python simple_launcher.py --npz-dir /path/to/data --medium-test

3. –ü–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!):
   python simple_launcher.py --npz-dir /path/to/data --full-train

4. –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
   python simple_launcher.py --npz-dir /path/to/data --max-files 15 --batch-size 2 --epochs 3
        '''
    )

    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument('--npz-dir', type=str, required=True,
                        help='–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å NPZ —Ñ–∞–π–ª–∞–º–∏')

    # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∂–∏–º—ã
    group = parser.add_mutually_exclusive_group()
    group.add_argument('--quick-test', action='store_true',
                       help='–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç (5 —Ñ–∞–π–ª–æ–≤, 1 —ç–ø–æ—Ö–∞)')
    group.add_argument('--medium-test', action='store_true',
                       help='–°—Ä–µ–¥–Ω–∏–π —Ç–µ—Å—Ç (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)')
    group.add_argument('--full-train', action='store_true',
                       help='–ü–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (–≤—Å–µ —Ñ–∞–π–ª—ã)')

    # –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument('--max-files', type=int,
                        help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤')
    parser.add_argument('--batch-size', type=int,
                        help='–†–∞–∑–º–µ—Ä batch')
    parser.add_argument('--epochs', type=int,
                        help='–≠–ø–æ—Ö –Ω–∞ —Ñ–∞–π–ª')
    parser.add_argument('--memory-threshold', type=float, default=70.0,
                        help='–ü–æ—Ä–æ–≥ –ø–∞–º—è—Ç–∏ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 70)')

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –Ω–æ–≤—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
    parser.add_argument('--orbit-filter', choices=['A', 'D', 'U'],
                        help='–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –æ—Ä–±–∏—Ç—ã')
    parser.add_argument('--lr', type=float, default=1e-4,
                        help='Learning rate')
    parser.add_argument('--target-height', type=int, default=2000,
                        help='–¶–µ–ª–µ–≤–∞—è –≤—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è AMSR2 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 2000)')
    parser.add_argument('--target-width', type=int, default=420,
                        help='–¶–µ–ª–µ–≤–∞—è —à–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è AMSR2 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 420)')
    parser.add_argument('--no-monitoring', action='store_true',
                        help='–û—Ç–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏')

    args = parser.parse_args()

    print("üõ∞Ô∏è AMSR2 SEQUENTIAL TRAINER LAUNCHER")
    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
    if not check_memory():
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")
        print("   –ó–∞–∫—Ä–æ–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        sys.exit(1)

    memory = psutil.virtual_memory()
    available_memory_gb = memory.available / 1024 ** 3

    # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤: {args.npz_dir}")
    analysis = analyze_npz_directory(args.npz_dir)

    if analysis is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ NPZ —Ñ–∞–π–ª—ã")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        sys.exit(1)

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = recommend_parameters(analysis, available_memory_gb)
    print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {recommendations['description']}")
    print(f"   –ú–∞–∫—Å. —Ñ–∞–π–ª–æ–≤: {recommendations['max_files']}")
    print(f"   Batch size: {recommendations['batch_size']}")
    print(f"   –≠–ø–æ—Ö –Ω–∞ —Ñ–∞–π–ª: {recommendations['epochs_per_file']}")

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if args.quick_test:
        final_params = {
            'max_files': 5,
            'batch_size': 1,
            'epochs_per_file': 1,
            'memory_threshold': 75.0,
            'mode': '–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç'
        }
    elif args.medium_test:
        final_params = {
            'max_files': recommendations['max_files'],
            'batch_size': recommendations['batch_size'],
            'epochs_per_file': recommendations['epochs_per_file'],
            'memory_threshold': recommendations['memory_threshold'],
            'mode': '–°—Ä–µ–¥–Ω–∏–π —Ç–µ—Å—Ç'
        }
    elif args.full_train:
        final_params = {
            'max_files': analysis['total_files'],
            'batch_size': max(1, recommendations['batch_size'] - 1),  # –ï—â–µ –±–æ–ª–µ–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ
            'epochs_per_file': 2,
            'memory_threshold': 70.0,  # –ü–æ–Ω–∏–∂–µ–Ω–æ —Å 80%
            'mode': '–ü–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ'
        }
    else:
        # –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        final_params = {
            'max_files': args.max_files or recommendations['max_files'],
            'batch_size': args.batch_size or recommendations['batch_size'],
            'epochs_per_file': args.epochs or recommendations['epochs_per_file'],
            'memory_threshold': args.memory_threshold,
            'mode': '–ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'
        }

    # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    final_params['max_files'] = min(final_params['max_files'], analysis['total_files'])
    final_params['batch_size'] = max(1, min(final_params['batch_size'], 4))  # –ú–∞–∫—Å–∏–º—É–º 4 (–±—ã–ª–æ 8)
    final_params['epochs_per_file'] = max(1, min(final_params['epochs_per_file'], 3))  # –ú–∞–∫—Å–∏–º—É–º 3 (–±—ã–ª–æ 5)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    memory_gb = psutil.virtual_memory().available / 1024 ** 3
    if memory_gb < 8 and final_params['batch_size'] > 1:
        logger.warning(f"‚ö†Ô∏è –ü—Ä–∏ {memory_gb:.1f}GB –ø–∞–º—è—Ç–∏ —Å–Ω–∏–∂–∞–µ–º batch_size –¥–æ 1")
        final_params['batch_size'] = 1

    if analysis['total_size_gb'] > 30 and final_params['max_files'] > 10:
        logger.warning(f"‚ö†Ô∏è –ü—Ä–∏ {analysis['total_size_gb']:.1f}GB –¥–∞–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –¥–æ 10")
        final_params['max_files'] = 10

    # –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    time_estimate = estimate_time(
        final_params['max_files'],
        final_params['epochs_per_file'],
        final_params['batch_size']
    )

    print(f"\n‚öôÔ∏è –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ({final_params['mode']}):")
    print(f"   –§–∞–π–ª–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {final_params['max_files']} –∏–∑ {analysis['total_files']}")
    print(f"   Batch size: {final_params['batch_size']}")
    print(f"   –≠–ø–æ—Ö –Ω–∞ —Ñ–∞–π–ª: {final_params['epochs_per_file']}")
    print(f"   –ü–æ—Ä–æ–≥ –ø–∞–º—è—Ç–∏: {final_params['memory_threshold']}%")

    print(f"\n‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏:")
    print(f"   –ë–∞—Ç—á–µ–π –≤—Å–µ–≥–æ: {time_estimate['total_batches']}")
    print(f"   –í—Ä–µ–º—è: {time_estimate['hours']:.1f} —á–∞—Å–æ–≤ ({time_estimate['days']:.1f} –¥–Ω–µ–π)")

    if time_estimate['hours'] > 24:
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û–±—É—á–µ–Ω–∏–µ –∑–∞–π–º–µ—Ç –±–æ–ª—å—à–µ —Å—É—Ç–æ–∫!")
        print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—á–∞—Ç—å —Å –º–µ–Ω—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤")

    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    if final_params['max_files'] > 50:
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û—á–µ–Ω—å –º–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è!")

    if analysis['total_size_gb'] > 30:
        print(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ë–æ–ª—å—à–æ–π –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö ({analysis['total_size_gb']:.1f} GB)!")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print(f"\nüöÄ –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ?")
    try:
        confirm = input("–í–≤–µ–¥–∏—Ç–µ 'yes' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è: ").strip().lower()
        if confirm not in ['yes', 'y', '–¥–∞', '–¥']:
            print("‚ùå –û–±—É—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            sys.exit(0)
    except KeyboardInterrupt:
        print("\n‚ùå –û–±—É—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        sys.exit(0)

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    cmd = [sys.executable, "sequential_amsr2_trainer.py"]

    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    cmd.extend(["--npz-dir", args.npz_dir])
    cmd.extend(["--max-files", str(final_params['max_files'])])
    cmd.extend(["--batch-size", str(final_params['batch_size'])])
    cmd.extend(["--epochs-per-file", str(final_params['epochs_per_file'])])
    cmd.extend(["--memory-threshold", str(final_params['memory_threshold'])])

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if args.orbit_filter:
        cmd.extend(["--orbit-filter", args.orbit_filter])

    if args.lr != 1e-4:
        cmd.extend(["--lr", str(args.lr)])

    if args.target_height != 2000:
        cmd.extend(["--target-height", str(args.target_height)])

    if args.target_width != 420:
        cmd.extend(["--target-width", str(args.target_width)])

    if args.no_monitoring:
        cmd.append("--no-monitoring")

    # –ò–º—è –º–æ–¥–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    model_name = f"amsr2_model_{final_params['mode'].lower().replace(' ', '_')}_{final_params['max_files']}files.pth"
    cmd.extend(["--save-path", model_name])

    print(f"\nüîß –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞:")
    print(" ".join(cmd))
    print(f"\nüìÅ –ú–æ–¥–µ–ª—å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫: {model_name}")

    print("\n" + "=" * 50)
    print("üöÄ –ó–ê–ü–£–°–ö –û–ë–£–ß–ï–ù–ò–Ø")
    print("=" * 50)

    try:
        # –ó–∞–ø—É—Å–∫
        result = subprocess.run(cmd, check=True)

        print("\n" + "=" * 50)
        print("üéâ –û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("=" * 50)
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"   –ú–æ–¥–µ–ª—å: {model_name}")
        print(f"   –°–≤–æ–¥–∫–∞: training_summary.json")
        print(f"   –ì—Ä–∞—Ñ–∏–∫: training_progress.png")
        print(f"   –õ–æ–≥: amsr2_sequential.log")

    except subprocess.CalledProcessError as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í–´–ü–û–õ–ù–ï–ù–ò–Ø (–∫–æ–¥: {e.returncode})")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥ amsr2_sequential.log –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
        sys.exit(1)

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –û–±—É—á–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)

    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()